@page "/"
@inject IJSRuntime js
@using Core


<head>
    <title>@randomEmoji() @date.ToString("dd-MMMM-yyyy", CultureInfo.CreateSpecificCulture("ES"))</title>
</head>

<div class="snowflakes" aria-hidden="true">
    @for(int x = 0; x < 10; x++)
    {
            <div class="snowflake">@randomFlakes()</div>
    }
</div>

<h1>Feliz Navidad en <img src="img/logo.png" height="50"></h1>
<h2> Acompañanos cada dia para descubrir algo Tecky. @randomEmoji()</h2>
<h1>@randomEmoji() @fullMonthName @date.Year @randomEmoji()</h1>
    <ul>
        <li><div class="door door1"><div>1</div><name-day>@nameByIndex(1)</name-day></div></li>
        <li><div class="door door2"><div>2</div><name-day>@nameByIndex(2)</name-day></div></li>
        <li><div class="door door3"><div>3</div><name-day>@nameByIndex(3)</name-day></div></li>
        <li><div class="door door4"><div>4</div><name-day>@nameByIndex(4)</name-day></div></li>
        <li><div class="door door5"><div>5</div><name-day>@nameByIndex(5)</name-day></div></li>
        <li><div class="door door6"><div>6</div><name-day>@nameByIndex(6)</name-day></div></li>
        <li><div class="door door7"><div>7</div><name-day>@nameByIndex(7)</name-day></div></li>
        <li><div class="door door8"><div>8</div><name-day>@nameByIndex(8)</name-day></div></li>
        <li><div class="door door9"><div>9</div><name-day>@nameByIndex(9)</name-day></div></li>
        <li><div class="door door10"><div>10</div><name-day>@nameByIndex(10)</name-day></div></li>
        <li><div class="door door11"><div>11</div><name-day>@nameByIndex(11)</name-day></div></li>
        <li><div class="door door12"><div>12</div><name-day>@nameByIndex(12)</name-day></div></li>
        <li><div class="door door13"><div>13</div><name-day>@nameByIndex(13)</name-day></div></li>
        <li><div class="door door14"><div>14</div><name-day>@nameByIndex(14)</name-day></div></li>
        <li><div class="door door15"><div>15</div><name-day>@nameByIndex(15)</name-day></div></li>
        <li><div class="door door16"><div>16</div><name-day>@nameByIndex(16)</name-day></div></li>
        <li><div class="door door17"><div>17</div><name-day>@nameByIndex(17)</name-day></div></li>
        <li><div class="door door18"><div>18</div><name-day>@nameByIndex(18)</name-day></div></li>
        <li><div class="door door19"><div>19</div><name-day>@nameByIndex(19)</name-day></div></li>
        <li><div class="door door20"><div>20</div><name-day>@nameByIndex(20)</name-day></div></li>
        <li><div class="door door21"><div>21</div><name-day>@nameByIndex(21)</name-day></div></li>
        <li><div class="door door22"><div>22</div><name-day>@nameByIndex(22)</name-day></div></li>
        <li><div class="door door23"><div>23</div><name-day>@nameByIndex(23)</name-day></div></li>
        <li><div class="door door24"><div>24</div><name-day>@nameByIndex(24)</name-day></div></li>
        <li><div class="door door25">25</div></li>
    </ul>

    <p id="message"></p>
    


    @inject IJSRuntime JSRuntime
    @using System.Globalization;
    @code{

        private string[] videos = { "uCpE6z999Uk", "v4cJ6dKk6Qw", "7cDzbyX1kOA" };
        //private DateTime date  = new DateTime(2021,12,30);
        private DateTime date  = DateTime.Now;
        TextInfo myTI = new CultureInfo("en-US",false).TextInfo;
        private string fullMonthName = new DateTime(2021, 12, 1).ToString("MMMM", CultureInfo.CreateSpecificCulture("ES"));
        private string[] emojis = { "🎅", "🤶", "⛄", "🦌", "🌟", "❄️", "🎁", "🎄", "🔔" , "🧦", "🍪", "👼", "🤖", "💻" };
        private string[] flakes = { "❅","❅","❅","❆","❆","❆","❆","❅","🎁" };
        private string pathRepo = "https://raw.githubusercontent.com/cloudappi/advent/main/wwwroot/img";
        private List<string> items = new List<string>();

        private string nameByIndex(int day)
        {
            DateTime dateValue = new DateTime(date.Year, 12, day);
            return dateValue.ToString("dddd", new CultureInfo("es-ES"));
        }

        private string randomEmoji()
        {
            return emojis[Util.random(emojis.Length)];
        }

        private string randomFlakes()
        {
            return flakes[Util.random(flakes.Length)];
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
               
                fullMonthName = myTI.ToTitleCase(fullMonthName);
                
                items.Add($"<h4>Descubre cada día un micro ejemplo, curiosidad o herramienta que te ayudará en nuestro mundo Api. ☁️</h4> <img src=\"{pathRepo}/logo2.png\" width=\"150px\">");
                items.Add($"<img src=\"{pathRepo}/blazor-logo.png\" width=\"100px\"><h4>Blazor es una tecnologia hibrida para tener front y back en uno solo, este calendario usa su version WASM.</h4><a target=\"_blank\" href =\"https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor\">+Info</a>");            
                items.Add("<iframe style=\"width:110%;height:100%;margin-left:-5%;\" src=\"data:text/html;base64,\"></iframe>");
                items.Add("<img src=\"https://www.campusmvp.es/recursos/image.axd?picture=/2017/NET-Core-Logo.png\" width=\"150px\" style=\"margin:10px\"><h4>En noviembre de 2021 se lanzo la primera realease de .NET 6 junto a VisualStudio 2022 incluyendo nuevas mejoras.</h4><a target=\"_blank\" href=\"https://dotnet.microsoft.com/download/dotnet/6.0\">+Info</a>");
                items.Add($"<img src=\"{pathRepo}/github-pages-logo.png\" width=\"150px\" style=\"margin:10px\"><h4>Aloja una pagina directamente en un repositorio de GitHub sin necesidad de un servidor, ¿un ejemplo?, este calendario.</h4><a target=\"_blank\" href=\"https://pages.github.com/\">+Info</a>");
                items.Add("<h3>CSS LAYOUT</h3></br><h4>Galeria y ejemplos de los siseños y patrones mas populares hechos con CSS.</h4><a target=\"_blank\" href=\"https://csslayout.io/\">+Info</a>");
                items.Add("<img src=\"https://i.ytimg.com/vi/5j82wxzwFyI/maxresdefault.jpg\" width=\"150px\"><h4>Construye aplicaciones de Flutter desde tu navegador arrastrando componentes.</h4><a target=\"_blank\" href=\"https://flutterflow.io/\">+Info</a>");
                items.Add("<a href=\"https://picsum.photos\"  target=\"_blank\" > Lorem picsum</a><h4>Te dejo una imagen aleatoria.</h4> <img src=\"https://picsum.photos/150/150\">");
                items.Add("<a href=\"https://developers.google.com/youtube/v3\" target=\"_blank\">Youtube Api</a><h4>Un video como aprendizaje.</h4><iframe width=\"150\" height=\"150\"  src=\"https://www.youtube.com/embed/" + videos[Util.random(videos.Length)] + "?autoplay=0\" frameborder =\"0\" allowfullscreen></iframe>");
                items.Add("<h3>You are 🌐?</h3><iframe style=\"width:110%;height:80%;margin-left:-5%;\" src=\"data:text/html;base64,\"></iframe>");
                items.Add($"<img src=\"{pathRepo}/OpenAI_Logo.png\" width=\"150px\" style=\"margin:10px\"></br><h4>El lenguaje inteligente GPT-3 fue liberado. Te permite generar textos que simulan la redacción humana. ¿Ya lo has probado?</h4><a target=\"_blank\" href=\"https://es.wikipedia.org/wiki/GPT-3\">+Info</a>");
                items.Add("<img src=\"https://apiaddicts.org/logo.png\"><br><h4>APITools. Las herramientas Open Source que mejorarán tus gobiernos de APIs (Creadas por nuestros expertos 👀)</h4><a target=\"_blank\" href=\"https://apiaddicts.org/page/apitools-informacion\">+Info</a>");
                items.Add("<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5iB1FAz1--/c_fill,f_auto,fl_progressive,h_320,q_auto,w_320/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/4507/16eb5347-8d42-4547-a4e0-a45d2d91d14b.png\" width=\"20%\"><h3>Medusa</h3><h4>La alternativa OpenSource a Shopify. Para empezar, gestionar y hacer crecer tu negocio.</h4><a target=\"_blank\" href=\"https://www.medusa-commerce.com/\">+Info</a>");
                items.Add("<img src=\"https://raw.githubusercontent.com/supabase/supabase/master/web/static/supabase-light-rounded-corner-background.svg\" width=\"150px\"><h4>La alternativa Open-Source a Firebase. Un backend en menos de 2 minutos (BBDD, Authentication, instant APIs).</h4><a target=\"_blank\" href=\"https://supabase.com/\">+Info</a>");
                items.Add("<img src=\"https://retool.com/logo.png\" width=\"150px\"><h4>Plataforma para construir componentes internos a partir de tus BBDD existentes.</h4><a target=\"_blank\" href=\"https://retool.com/\">+Info</a>");
                items.Add("<img src=\"https://smalldev.tools/img/logo.png\" width=\"150px\"></br><h4>Un monton de herramientas y utilidades con ejemplos para devs que te facilitaran el día.</h4><a target=\"_blank\" href=\"https://smalldev.tools/\">+Info</a>");
                items.Add("<a href=\"https://www.openstreetmap.org\" target=\"_blank\">OpenStreetMap</a><h4>¿Es posible insertar un mapa funcional en un espacio tan limitado?.</h4><iframe width=\"150\" height=\"150\" src =\"https://www.openstreetmap.org/export/embed.html?bbox=-27.861328125%2C31.55981453201843%2C8.833007812500002%2C46.392411189814645&amp;layer=mapnik\"></iframe>");
                items.Add("<h3>QuickRef.ME</h3></br><h4>Aquí hay algunas hojas de trucos y referencias rápidas aportadas por expertos en opensource,</h4><a target=\"_blank\" href=\"https://quickref.me/\">+Info</a>");
                items.Add("<h3>DrivenListen</h3><br/><h4>¿Te apetece dar un paseo por el mundo desde tu casa? Prueba esto mientras escuchas algo de música.</h4><a target=\"_blank\" href=\"https://drivenlisten.com/\">+Info</a>");
                items.Add("<img src=\"https://www.evernote.design/assets/images/lawsofux.jpg\" width=\"50px\"><h3>Lawsofux</h3><h4>Colección de mejores prácticas que los diseñadores pueden considerar al crear interfaces de usuario.</h4><a target=\"_blank\" href=\"https://lawsofux.com/\">+Info</a>");
                items.Add("<a href=\"https://pravatar.cc/\"  target=\"_blank\" >Pravatar</a><h4>Te presento a una persona aleatoria.</h4> <img src=\"https://i.pravatar.cc/150\">");
                items.Add("<img src=\"https://www.photopea.com/promo/thumb256.png\" width=\"20px\"><h3>Photopea</h3><h4>Una alternativa a Photoshop desde tu propio navegador sin instalar nada y de forma gratuita.</h4><a target=\"_blank\" href=\"https://www.photopea.com/\">+Info</a>");
                items.Add("<img src=\"https://coolors.co/assets/img/logo.svg\" width=\"100px\"><h4></br>¿Se te de mal elegir paletas de colores? Aqui puedes generar y elegir la ideal para tu desarrollo.</h4><a target=\"_blank\" href=\"https://coolors.co/\">+Info</a>");
                items.Add("<h3>The True Size Of...</h3><h4>¿Es Groenlandia realmente tan grande como toda África? Arrastra y suelta países alrededor del mapa para comparar su tamaño.</h4><a target=\"_blank\" href=\"https://thetruesize.com/\">+Info</a>");   
                items.Add($"<h4>Si aun te has quedado con ganas visita nuestra nueva Web y descubre un poco mas de nuestro mundo Api.<br>¡FELICES FIESTAS!</h4><a target=\"_blank\" href=\"https://www.cloudappi.net/\"><img src=\"{pathRepo}/logo2.png\" width=\"180px\">");

                List<string> control_items = new List<string>();
                for (int i = 0; i < date.Day && i <= 25 && i < items.Count(); i++)
                    control_items.Add(items[i]);

                for (int i = date.Day; i < 25; i++)
                    control_items.Add($"Tendras que esperar {i + 1 - date.Day} dias.");


                await js.InvokeAsync<object>("controls", date.Day, date.Month, control_items);
                StateHasChanged();
            }
        }
    }
